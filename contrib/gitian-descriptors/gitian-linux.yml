---
name: "giant-linux-1.0"
enable_cache: true
suites:
- "xenial"
architectures:
- "amd64"
docker_image_digests:
- "xenial"
packages: 
- "curl"
- "g++-aarch64-linux-gnu"
- "g++-4.8-aarch64-linux-gnu"
- "gcc-4.8-aarch64-linux-gnu"
- "binutils-aarch64-linux-gnu"
- "g++-arm-linux-gnueabihf"
- "g++-4.8-arm-linux-gnueabihf"
- "gcc-4.8-arm-linux-gnueabihf"
- "binutils-arm-linux-gnueabihf"
- "g++-4.8-multilib"
- "gcc-4.8-multilib"
- "binutils-gold"
- "git-core"
- "pkg-config"
- "autoconf"
- "libtool"
- "automake"
- "faketime"
- "bsdmainutils"
- "ca-certificates"
- "python"
- "libbluetooth-dev"
- "libxkbcommon-dev"
- "bison"
- "bzip2"
- "cdbs"
- "dbus-x11"
- "dpkg-dev"
- "elfutils"
- "devscripts"
- "fakeroot"
- "flex"
- "git-svn"
- "gperf"
- "libappindicator3-dev"
- "libasound2-dev"
- "libatspi2.0-dev"
- "libbrlapi-dev"
- "libbz2-dev"
- "libcairo2-dev"
- "libcap-dev"
- "libcups2-dev"
- "libcurl4-gnutls-dev"
- "libdrm-dev"
- "libelf-dev"
- "libffi-dev"
- "libgbm-dev"
- "libglib2.0-dev"
- "libglu1-mesa-dev"
- "libgnome-keyring-dev"
- "libgtk-3-dev"
- "libkrb5-dev"
- "libnspr4-dev"
- "libnss3-dev"
- "libpam0g-dev"
- "libpci-dev"
- "libpulse-dev"
- "libsctp-dev"
- "libspeechd-dev"
- "libsqlite3-dev"
- "libssl-dev"
- "libudev-dev"
- "libwww-perl"
- "libxslt1-dev"
- "libxss-dev"
- "libxt-dev"
- "libxtst-dev"
- "locales"
- "openbox"
- "p7zip"
- "patch"
- "perl"
- "python-cherrypy3"
- "python-crypto"
- "python-dev"
- "python-numpy"
- "python-opencv"
- "python-openssl"
- "python-psutil"
- "python-yaml"
- "rpm"
- "ruby"
- "subversion"
- "uuid-dev"
- "wdiff"
- "x11-utils"
- "xcompmgr"
- "xz-utils"
- "zip"
- "libpulse0"
- "libbz2-1.0"
- "libappindicator3-1"
- "libasound2"
- "libatk1.0-0"
- "libatspi2.0-0"
- "libc6"
- "libcairo2"
- "libcap2"
- "libcups2"
- "libexpat1"
- "libffi6"
- "libfontconfig1"
- "libfreetype6"
- "libglib2.0-0"
- "libgnome-keyring0"
- "libgtk-3-0"
- "libpam0g"
- "libpango1.0-0"
- "libpci3"
- "libpcre3"
- "libpixman-1-0"
- "libspeechd2"
- "libstdc++6"
- "libsqlite3-0"
- "libuuid1"
- "libwayland-egl1-mesa"
- "libx11-6"
- "libx11-xcb1"
- "libxau6"
- "libxcb1"
- "libxcomposite1"
- "libxcursor1"
- "libxdamage1"
- "libxdmcp6"
- "libxext6"
- "libxfixes3"
- "libxi6"
- "libxinerama1"
- "libxrandr2"
- "libxrender1"
- "libxtst6"
- "zlib1g"
- "7za"
- "fonts-indic"
- "fonts-ipafont"
- "fonts-stix"
- "fonts-thai-tlwg"
- "fonts-tlwg-garuda"
- "language-pack-da"
- "language-pack-fr"
- "language-pack-he"
- "language-pack-zh-hant"
- "libappindicator-dev"
- "libappindicator1"
- "libappindicator3-1:i386"
- "libdconf-dev"
- "libdconf-dev:i386"
- "libdconf1"
- "libdconf1:i386"
- "libexif-dev"
- "libexif12"
- "libexif12:i386"
- "libgbm-dev"
- "libgconf-2-4:i386"
- "libgconf2-dev"
- "libgl1-mesa-dev"
- "libgl1-mesa-glx:i386"
- "libgles2-mesa-dev"
- "libgtk-3-0:i386"
- "libgtk2.0-0"
- "libgtk2.0-0:i386"
- "libgtk2.0-dev"
- "mesa-common-dev"
- "msttcorefonts"
- "ttf-dejavu-core"
- "ttf-indic-fonts"
- "ttf-kochi-gothic"
- "ttf-kochi-mincho"
- "ttf-mscorefonts-installer"
- "xfonts-mathml"
- "libgbm-dev-lts-xenial"
- "libgl1-mesa-dev-lts-xenial"
- "libgl1-mesa-glx-lts-xenial:i386"
- "libgles2-mesa-dev-lts-xenial"
- "mesa-common-dev-lts-xenial"
#reference_datetime: "2015-06-01 00:00:00"
remotes:
- "url": "https://github.com/GiantPay/GiantCore.git"
  "dir": "giant"
files: []
script: |

  WRAP_DIR=$HOME/wrapped
  HOSTS="x86_64-linux-gnu"
  CONFIGFLAGS="--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests"
  FAKETIME_HOST_PROGS=""
  FAKETIME_PROGS="date ar ranlib nm"
  HOST_CFLAGS="-O2 -g"
  HOST_CXXFLAGS="-O2 -g"
  HOST_LDFLAGS=-static-libstdc++

  export QT_RCC_TEST=1
  export GZIP="-9n"
  export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
  export TZ="UTC"
  export BUILD_DIR=`pwd`
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
  fi

  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/bin/bash' > ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "\$REAL \$@" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    for prog in ${FAKETIME_HOST_PROGS}; do
        echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  EXTRA_INCLUDES_BASE=$WRAP_DIR/extra_includes
  mkdir -p $EXTRA_INCLUDES_BASE

  # x86 needs /usr/include/i386-linux-gnu/asm pointed to /usr/include/x86_64-linux-gnu/asm,
  # but we can't write there. Instead, create a link here and force it to be included in the
  # search paths by wrapping gcc/g++.

  mkdir -p $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu
  rm -f $WRAP_DIR/extra_includes/i686-pc-linux-gnu/asm
  ln -s /usr/include/x86_64-linux-gnu/asm $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu/asm

  for prog in gcc g++; do
  rm -f ${WRAP_DIR}/${prog}
  cat << EOF > ${WRAP_DIR}/${prog}
  #!/bin/bash
  REAL="`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1`"
  for var in "\$@"
  do
    if [ "\$var" = "-m32" ]; then
      export C_INCLUDE_PATH="$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu"
      export CPLUS_INCLUDE_PATH="$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu"
      break
    fi
  done
  \$REAL \$@
  EOF
  chmod +x ${WRAP_DIR}/${prog}
  done

  cd giant
  BASEPREFIX=`pwd`/depends
  # Build dependencies for each host
  for i in $HOSTS; do
    EXTRA_INCLUDES="$EXTRA_INCLUDES_BASE/$i"
    if [ -d "$EXTRA_INCLUDES" ]; then
      export HOST_ID_SALT="$EXTRA_INCLUDES"
    fi
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
    unset HOST_ID_SALT
  done

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  # Create the release tarball using (arbitrarily) the first host
  ./autogen.sh
  CONFIG_SITE=${BASEPREFIX}/`echo "${HOSTS}" | awk '{print $1;}'`/share/config.site ./configure --prefix=/
  make dist
  SOURCEDIST=`echo giant-*.tar.gz`
  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`
  # Correct tar file order
  mkdir -p temp
  pushd temp
  tar xf ../$SOURCEDIST
  find giant-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST
  popd

  ORIGPATH="$PATH"
  # Extract the release tarball into a dir for each host and build
  for i in ${HOSTS}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH=`pwd`/installed/${DISTNAME}
    mkdir -p ${INSTALLPATH}
    tar --strip-components=1 -xf ../$SOURCEDIST

    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS="${HOST_CFLAGS}" CXXFLAGS="${HOST_CXXFLAGS}" LDFLAGS="${HOST_LDFLAGS}"
    make ${MAKEOPTS}

    make install DESTDIR=${INSTALLPATH}
    cd installed
    find . -name "lib*.la" -delete
    find . -name "lib*.a" -delete
    rm -rf ${DISTNAME}/lib/pkgconfig
    find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \;
    find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \;
    find ${DISTNAME} -not -name "*.dbg" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz
    find ${DISTNAME} -name "*.dbg" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz
    cd ../../
    rm -rf distsrc-${i}
  done
  mkdir -p $OUTDIR/src
  mkdir -p $OUTDIR/src
  mv $SOURCEDIST $OUTDIR/src
